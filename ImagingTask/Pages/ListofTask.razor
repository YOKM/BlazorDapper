@page "/ListofTask"
@using ImagingTask.Model
@using ImagingTask.Services

@inject InterfaceImagingTask ImagingTaskServices
@inject InterfaceDetailTask DetailTaskServices


<h1>
</h1>







@if (AllTasks == null)
{
    <p>Loading ... </p>
}
else
{


    <input @bind-value="@searchText" @bind-value:event="oninput" @onkeyup="Search"
           type="text" placeholder="Which task you looking for?" />
 

    <div>

        <table class="table table-sm table-striped w-auto">
            <thead>
                <tr>
                    <th></th>
                    <th>Jobname</th>
                    <th>Schedule Time</th>
                    <th>Is Active</th>
                    <th>Description</th>
                    <th>Job Type</th>
                    <th></th>
                </tr>


            </thead>
            <tbody>
                @foreach (var task in AllTasks)
                {
                    <tr>
                        <td>
                            @if (task.Id == JobId)
                            {
                                <button class="btn btn-primary" @onclick="@(async () => await ShowDetails(task.Id))">-</button>
                            }
                            else
                            {
                                <button class="btn btn-primary" @onclick="@(async () => await ShowDetails(task.Id))">+</button>
                            }


                        </td>

                        <td>@task.Jobname </td>
                        <td>@task.scheduleTIME </td>
                        <td>@task.IsActive </td>
                        <td>@task.Description </td>
                        <td>@task.JOBTYPE </td>
                        <td>
                            <a href="/EditTask/@task.Id ">Edit</a>
                        </td>
                    </tr>


                    @if ((showDetail) && (DetailTask != null) && (task.Id == JobId))
                    {

                        <tr style="height: 30px; background-color:#336699 ;
                            color:#FFFFFF ;border: solid 1px #659EC7;" colspan="6">
                            <td colspan="6">
                                @*<p>@DetailTask.Id</p>
                                    <p>@DetailTask.Jobname</p>
                                    <p>@DetailTask.Jobid</p>*@




                                @if (!string.IsNullOrWhiteSpace(@DetailTask.EmailNotificationAddress))
                                {

                            <tr>
                                <td>Email Notifications</td>
                                <td>@DetailTask.EmailNotificationAddress</td>

                            </tr>

                        }



                                @if (!string.IsNullOrWhiteSpace(@DetailTask.JobdetailsType))
                                {

                                    <tr>
                                        <td>JobType :</td>
                                        <td>@DetailTask.JobdetailsType </td>

                                    </tr>

                                }
                                @if (!string.IsNullOrWhiteSpace(@DetailTask.SFtphost))
                                {
                                    <tr>
                                        <td>sFTP Host :</td>
                                        <td>@DetailTask.SFtphost </td>

                                    </tr>

                                }

                                @if (!string.IsNullOrWhiteSpace(@DetailTask.SFtpuploadFrom))
                                {
                                    <tr>
                                        <td>sFTP Upload from :</td>
                                        <td>@DetailTask.SFtpuploadFrom </td>

                                    </tr>

                                }
                                @if (!string.IsNullOrWhiteSpace(@DetailTask.SFtpuploadto))
                                {
                                    <tr>
                                        <td>sFTP Upload to :</td>
                                        <td>@DetailTask.SFtpuploadto</td>

                                    </tr>

                                }
                                @if (!string.IsNullOrWhiteSpace(@DetailTask.SFtpdownloadFrom))
                                {
                                    <tr>
                                        <td>sFTP Download from :</td>
                                        <td>@DetailTask.SFtpdownloadFrom</td>

                                    </tr>

                                }
                                @if (!string.IsNullOrWhiteSpace(@DetailTask.SFtpdownloadTo))
                                {
                                    <tr>
                                        <td>sFTP Dpwnload to :</td>
                                        <td>@DetailTask.SFtpdownloadTo</td>

                                    </tr>

                                }
                                @if (!string.IsNullOrWhiteSpace(@DetailTask.UsernamesFtp))
                                {
                                    <tr>
                                        <td>Username :</td>
                                        <td>@DetailTask.UsernamesFtp </td>

                                    </tr>

                                }
                                @if (!string.IsNullOrWhiteSpace(@DetailTask.SshfingerPrint))
                                {
                                    <tr>
                                        <td>SSH Fingerprint :</td>
                                        <td>@DetailTask.SshfingerPrint </td>

                                    </tr>

                                }
                                @if (!string.IsNullOrWhiteSpace(@DetailTask.Extra1))
                                {
                                    <tr>
                                        <td>Extra1 :</td>
                                        <td>@DetailTask.Extra1</td>

                                    </tr>

                                }
                                @*<p>@DetailTask.PaswordsFtp</p>*@
                                @if (!string.IsNullOrWhiteSpace(@DetailTask.Extra2))
                                {
                                    <tr>
                                        <td>Extra2 :</td>
                                        <td>@DetailTask.Extra2</td>

                                    </tr>

                                }
                                @if (!string.IsNullOrWhiteSpace(@DetailTask.Extra3))
                                {
                                    <tr>
                                        <td>Extra3 :</td>
                                        <td>@DetailTask.Extra3</td>

                                    </tr>

                                }
                                @if (!string.IsNullOrWhiteSpace(@DetailTask.Extra4))
                                {
                                    <tr>
                                        <td>Extra4 :</td>
                                        <td>@DetailTask.Extra4</td>

                                    </tr>

                                }
                                @if (!string.IsNullOrWhiteSpace(@DetailTask.Extra5))
                                {
                                    <tr>
                                        <td>Extra5 :</td>
                                        <td>@DetailTask.Extra5</td>

                                    </tr>

                                }
                                @if (!string.IsNullOrWhiteSpace(@DetailTask.TimeSpanWait))
                                {
                                    <tr>
                                        <td>TimeSpanWait :</td>
                                        <td>@DetailTask.TimeSpanWait </td>

                                    </tr>

                                }
                                @if (!string.IsNullOrWhiteSpace(@DetailTask.FileExtensiontoUpload))
                                {
                                    <tr>
                                        <td>File Extension to Upload : </td>
                                        <td>@DetailTask.FileExtensiontoUpload </td>

                                    </tr>

                                }
                                @if (!string.IsNullOrWhiteSpace(@DetailTask.PortNumber))
                                {
                                    <tr>
                                        <td>Port Number :</td>
                                        <td>@DetailTask.PortNumber</td>

                                    </tr>

                                }

                                @if (!string.IsNullOrWhiteSpace(@DetailTask.WordsToCheck))
                                {
                                    <tr>
                                        <td>Words to Check :</td>
                                        <td>@DetailTask.WordsToCheck </td>

                                    </tr>

                                }

                                </td>

                                </tr>

                            }




                }

            </tbody>
        </table>

    </div>










    if (skip + take > count)
    {
        <label bind="nav">@count/@count</label>  // LASTPAGE
        // then we should only see Previous button
        <button @onclick=@Previous> ← </button>


    }
    else
    {
        if (skip == 0) // first page
        {
            <label bind="nav">@take/@count</label>
            <button @onclick=@Previous> ← </button>
            <button @onclick=@Next> → </button>
        }
        else
        {
            <label bind="nav">@(skip + take)/@count</label>
            <button @onclick=@Previous> ← </button>
            <button @onclick=@Next> → </button>

        }

    }



}

<style type="text/css">


</style>


@functions{

    IEnumerable<ImagingTaskModel> AllTasks;

    ImagingTaskDetailModel DetailTask = new ImagingTaskDetailModel();

    int JobId = 0;

    int count = 0;   // variable to use for pagination
    int countPerPage = 0;
    bool showDetail = false;
    int take = 7;
    int skip = 0;
    string searchText;  //  bind to serach box



    protected override async Task OnInitializedAsync()
    {
        AllTasks = await ImagingTaskServices.GetAllImagingTask(0, take);

        count = await ImagingTaskServices.CountImagingTask();      // all count on table record
                                                                   // AllTasks = AllTasks.Skip(5).Take(3);     // total of task in table
    }

    async Task Search(KeyboardEventArgs eventArgs)
    {
       
        
        skip = 0;

       

        if(searchText !="")
        {
            AllTasks = await ImagingTaskServices.GetAllImagingTaskByName(searchText, 0, take);  //first page
            count =  AllTasks.Count();
            StateHasChanged();
        

        }
        else
        {
            AllTasks = await ImagingTaskServices.GetAllImagingTask(0, take);
            count = await ImagingTaskServices.CountImagingTask(); 
        }

        



    }

    async Task Next()
    {
        skip = skip + take;

        AllTasks = await ImagingTaskServices.GetAllImagingTask(skip, take);   // then next page so on ..

    }

    async Task Previous()
    {
        countPerPage = AllTasks.Count();

        if (skip > take)
        {
            skip = skip - take;
        }


        AllTasks = await ImagingTaskServices.GetAllImagingTask(skip, take);


    }

    async Task ShowDetails(int JobId_fromMasterAPI)
    {
        // showDetail = true;

        // if id = JOBid
        //then showdetails == true
        if (JobId != JobId_fromMasterAPI)
        {
            showDetail = true;
        }
        else
        {
            if (showDetail == false)
            {
                //   Imagename = "Images/expand.png";

                showDetail = true;

            }
            else
            {
                //  Imagename = "Images/toggle.png";
                showDetail = false;
            }
        }

        JobId = JobId_fromMasterAPI;

        // should use query to get the details info
        //instead of the whole stored procedure ..

        // send detail to another list or


        DetailTask = await DetailTaskServices.SingleTask(JobId_fromMasterAPI);

    }



}
